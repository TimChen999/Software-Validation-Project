[
  {"bug": "Null pointer dereference", "line": 12, "reason": "value may be null"},
  {"bug": "Potential null pointer dereference", "line": 19, "reason": "result may be null"},
  {"bug": "Resource leak: FileInputStream not closed", "line": 30, "reason": "fis.close() missing"},
  {"bug": "Partial resource leak: BufferedReader not closed in all paths", "line": 41, "reason": "reader.close() missing when line is null"},
  {"bug": "Missing synchronization on counter increment", "line": 57, "reason": "increment operation is not thread-safe"},
  {"bug": "Race condition: total += value is non-atomic", "line": 66, "reason": "total may be updated concurrently before addition completes"},
  {"bug": "Deadlock potential between lock1 and lock2", "line": 75, "reason": "locks acquired in opposite order in deadlockMethod1() and deadlockMethod2()"},
  {"bug": "Off-by-one error in array bounds: sum should be < array.length", "line": 93, "reason": "loop iterates one too many times"},
  {"bug": "Potential negative array index: position may be less than zero", "line": 106, "reason": "position is not validated"},
  {"bug": "Integer overflow potential in integerOverflow()", "line": 122, "reason": "a + b may exceed Integer.MAX_VALUE"},
  {"bug": "Integer underflow potential in integerUnderflow()", "line": 130, "reason": "a - b may be less than Integer.MIN_VALUE if a < b"},
  {"bug": "Potential division by zero in divisionByZero()", "line": 138, "reason": "b may be zero"},
  {"bug": "SQL injection vulnerability: userInput not properly sanitized", "line": 156, "reason": "'; DROP TABLE users --" could delete the users table"},
  {"bug": "Weak cryptography: DES is a weak encryption algorithm", "line": 163, "reason": "DES should not be used for new implementations due to its short key length"},
  {"bug": "Hardcoded credential: password is hardcoded and visible in source code", "line": 207, "reason": "password should not be stored in plaintext or as a constant"},
  {"bug": "Potential path traversal vulnerability: fileName not properly sanitized", "line": 238, "reason": "../; ../" could access files outside the safe directory},
  {"bug": "Memory leak: objects continuously added to leakyMap but never removed", "line": 256, "reason": "leakyMap may grow indefinitely"},
  {"bug": "Unchecked cast: obj may not be a List<String>", "line": 273, "reason": "(List<String>) obj may throw ClassCastException if obj is not a List<String>"},
  {"bug": "Infinite loop: condition never changes", "line": 289, "reason": "x will always be greater than 5 on the first iteration"},
  {"bug": "Unreachable code: this line will never execute", "line": 306, "reason": "the method returns before this line is reached"},
  {"bug": "Non-serializable field in serializable class: thread is not marked as transient", "line": 329, "reason": "SerializableBug cannot be serialized with a non-null thread field"},
  {"bug": "Inefficient string concatenation: result = result + item + ", " repeats in each iteration", "line": 350, "reason": "string concatenation creates new strings and is inefficient for large lists"},
  {"bug": "O(n²) complexity in inefficientCollectionIteration(): list.size() called in loop", "line": 368, "reason": "list.size() could be calculated once before the loop to improve performance"},
  {"bug": "Thread-unsafe map: HashMap is not thread-safe", "line": 401, "reason": "sharedMap may throw ConcurrentModificationException if accessed concurrently from multiple threads"},
  {"bug": "Unlock without try-finally: lock.unlock() missing in unlockWithoutTry()", "line": 435, "reason": "lock may not be released if doSomething() throws an exception"},
  {"bug": "Equals/HashCode contract violation: EqualsHashCodeViolation does not implement hashCode()", "line": 467, "reason": "equals() and hashCode() must be consistent; changing one requires changing the other"},
  {"bug": "Unclosed closeable resource: BufferedReader not closed in readFileLines()", "line": 506, "reason": "reader.close() missing; may cause resource leak or FileDescriptor leaks if exceptions are thrown"},
  {"bug": "Empty exception handler: catch block swallows FileNotFoundException without any action", "line": 521, "reason": "exception is not logged, rethrown, or handled in any way"},
  {"bug": "Unused variable: unused may not be used and has no effect on program execution", "line": 540, "reason": "unused variable could be removed without changing the behavior of the method"},
  {"bug": "Integer division truncation: total / count will truncate towards zero if count is negative or zero", "line": 562, "reason": "total / count may not produce the expected average for non-positive counts"},
  {"bug": "Uninitialized variable: result may not be initialized on all paths in uninitializedVariable()", "line": 581, "reason": "result is only initialized if Math.random() > 0.5"}
]